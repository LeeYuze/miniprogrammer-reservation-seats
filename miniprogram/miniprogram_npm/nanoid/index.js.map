{"version":3,"sources":["index.js","url-alphabet/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('crypto-js');var randomFillSync = __TEMP__['randomFillSync'];\nvar __TEMP__ = require('./url-alphabet/index.js');var urlAlphabet = __TEMP__['urlAlphabet'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'urlAlphabet', { enumerable: true, configurable: true, get: function() { return urlAlphabet; } });\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var random = exports.random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var customRandom = exports.customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var customAlphabet = exports.customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var nanoid = exports.nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n};\n","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var urlAlphabet = exports.urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n"]}